module,description,sqlquery
Boolean Transformation Recommendation,Identifies Data type in Oracle that can be transformed as Boolean in PostgreSQL,"SELECT atc.owner, atc.TABLE_NAME, atc.COLUMN_NAME, atc.DATA_TYPE FROM ALL_TAB_COLUMNS atc WHERE DATA_TYPE IN ('VARCHAR2', 'CHAR', 'NUMBER') AND OWNER = '<<ORACLE_SCHEMA>>' AND num_distinct <= 2 and UPPER(to_char(utl_raw.cast_to_varchar2(atc.low_value))) IN ( 'Y', 'N', 'TRUE', 'FALSE', 'YES', 'NO', '1', '0', 'ON', 'OFF' ) and UPPER( to_char(utl_raw.cast_to_varchar2(atc.high_value)) ) IN ( 'Y', 'N', 'TRUE', 'FALSE', 'YES', 'NO', '1', '0', 'ON', 'OFF' )"
Partition Table with Primary key excluding Partition Columns,Identifies the Partition table with a Global Primary key that does not include partition columns,"WITH ALIAS1 AS ( SELECT TABS.OWNER, TABS.TABLE_NAME, PCOLS.COLUMN_NAME AS PART_COLS, LISTAGG(PK_CONS.column_name, ',') WITHIN GROUP ( ORDER BY PK_CONS.position ) AS PK_SET FROM dba_tables TABS, dba_part_key_columns PCOLS, ( select all_cons_columns.owner as schema_name, all_cons_columns.table_name, all_cons_columns.column_name, all_cons_columns.position, all_constraints.status from dba_constraints all_constraints, dba_cons_columns all_cons_columns where all_constraints.constraint_type = 'P' and all_constraints.constraint_name = all_cons_columns.constraint_name and all_constraints.owner = all_cons_columns.owner order by all_cons_columns.owner, all_cons_columns.table_name, all_cons_columns.position ) PK_CONS WHERE TABS.PARTITIONED = 'YES' AND TABS.OWNER = upper('<<ORACLE_SCHEMA>>') AND PCOLS.OWNER = TABS.OWNER AND PCOLS.NAME = TABS.TABLE_NAME AND PK_CONS.schema_name = TABS.OWNER AND PK_CONS.table_name = TABS.TABLE_NAME GROUP BY TABS.OWNER, TABS.TABLE_NAME, PCOLS.COLUMN_NAME ) SELECT OWNER, TABLE_NAME, PART_COLS, PK_SET FROM ALIAS1 WHERE INSTR(PK_SET, PART_COLS) = 0"
Default on Null,Identifies constraints with Default on NULL that are not supported in PostgreSQL,"WITH ORACLE AS ( SELECT OWNER, TABLE_NAME, COLUMN_NAME, DEFAULT_ON_NULL, NULLABLE, DATA_DEFAULT FROM dba_tab_columns WHERE OWNER = upper('<<ORACLE_SCHEMA>>') and DEFAULT_ON_NULL = 'YES' and table_name not in ( select dba_objects.OBJECT_NAME from dba_objects where object_type = 'VIEW' AND dba_objects.owner = dba_tab_columns.owner ) ) SELECT * FROM ORACLE"
Extended Stats in Oracle,Identifies list of extended stats that need to re-visit to see if they can be re-created in PostgreSQL,"select OWNER, TABLE_NAME, EXTENSION_NAME, EXTENSION, CREATOR from DBA_STAT_EXTENSIONS where owner = upper('<<ORACLE_SCHEMA>>')"
User Defined Types,Identifies type that are user defined and might failed during data migrations,"WITH INPUT AS ( SELECT '<<ORACLE_SCHEMA>>' AS owner from dual ) SELECT ALL_TAB_COLS.TABLE_NAME AS TABLE_NAME, ALL_TAB_COLS.COLUMN_NAME AS COLUMN_NAME, ALL_TAB_COLS.DATA_TYPE AS DATA_TYPE, CASE WHEN TYPECODE = 'COLLECTION' THEN '*' ELSE '1' END AS MAPPING FROM ALL_TAB_COLS JOIN ALL_TYPES ON ALL_TAB_COLS.DATA_TYPE_OWNER = ALL_TYPES.OWNER AND ALL_TAB_COLS.DATA_TYPE = ALL_TYPES.TYPE_NAME WHERE ALL_TAB_COLS.OWNER = ( select owner from INPUT ) AND ALL_TAB_COLS.USER_GENERATED = 'YES' ORDER BY TABLE_NAME"
Type Body with member functions,Identified Type body existance for schema,"SELECT all_objects.owner, all_objects.object_type, count(1) cnt_type_body, sum( regexp_count( regexp_replace( dbms_metadata.get_ddl( case all_objects.object_type when 'TYPE BODY' then 'TYPE_BODY' ELSE all_objects.object_type END, all_objects.object_name, all_objects.owner ), '(''.*?''|"".*?"")|/\s*\*.*?\*/\s*|\s*--.*?(?=$|\z)', '\1', 1, 0, 'mn' ), CHR(10) ) ) AS lines FROM all_objects WHERE OWNER = upper('<<ORACLE_SCHEMA>>') AND OBJECT_TYPE = 'TYPE BODY' AND STATUS = 'VALID' group by all_objects.owner, all_objects.object_type"